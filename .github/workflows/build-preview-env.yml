name: Preview Environment Pipeline

on:
  workflow_dispatch:
    inputs:
      customer_name:
        description: 'Customer name'
        required: true
        type: string
      mapsunified_pr:
        description: 'Mapsunified PR'
        required: false
        type: string
      mapsdatabase_pr:
        description: 'Mapsdatabase PR'
        required: false
        type: string

jobs:
  publish-to-maps-database:
    if: ${{ github.event.inputs.mapsdatabase_pr != '' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      
      - name: SSH into EC2 and restore DB
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Downloading backup file..."
            aws s3 cp s3://acme-preview-database-backups/PreviewEnvironmentDB.bak /var/opt/mssql/data/PreviewEnvironmentDB.bak

            echo "SQL Server starting the restore..."
            /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '${{ secrets.DB_SA_PASSWORD }}' -Q "RESTORE DATABASE [PreviewEnvironmentDB] FROM DISK = '/var/opt/mssql/data/PreviewEnvironmentDB.bak' WITH REPLACE"

      - name: Check DB online
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Checking if DB is online..."
            until /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '${{ secrets.DB_SA_PASSWORD }}' -Q "SELECT state_desc FROM sys.databases WHERE name = 'PreviewEnvironmentDB'" | grep -q ONLINE; do
              echo "Waiting 5s..."
              sleep 5
            done
            echo "âœ… DB is ONLINE!"

      - name: Create DB user & store secret
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Generating password..."
            PASSWORD=$(openssl rand -base64 20)

            echo "Creating DB user..."
            /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '${{ secrets.DB_SA_PASSWORD }}' -d PreviewEnvironmentDB -Q "CREATE LOGIN [preview_env_user] WITH PASSWORD = '${PASSWORD}'; CREATE USER [preview_env_user] FOR LOGIN [preview_env_user]; ALTER ROLE db_owner ADD MEMBER [preview_env_user];"

      - name: Upsert secret
        run: |
          if aws secretsmanager describe-secret --secret-id preview-env-user-secret --region eu-west-1; then
            echo "Secret exists, updating.."
            aws secretsmanager put-secret-value \
              --secret-id preview-env-user-secret \
              --secret-string "{\"username\":\"preview_env_user\",\"password\":\"${PASSWORD}\"}" \
              --region eu-west-1
          else
            echo "Secret does not exist, creating.."
            aws secretsmanager create-secret \
              --name preview-env-user-secret \
              --secret-string "{\"username\":\"preview_env_user\",\"password\":\"${PASSWORD}\"}" \
              --region eu-west-1
          fi

  build-image-and-push:
    if: ${{ github.event.inputs.mapsunified_pr != '' }}
    runs-on: ubuntu-latest
    env:
      VERSION: 0.${{ github.run_number }}
      AWS_REGISTRY: ${{ '924947995844.dkr.ecr.eu-west-1.amazonaws.com/mapsunified-dev-repository' }}
    steps:
      - name: Checkout specific branch of another repository
        uses: actions/checkout@v3
        with:
          repository: inventanalytics/mapsunified # Replace with the actual owner/repo name
          ref: ${{ github.event.inputs.mapsunified_pr }}       # Specify the branch name here
          path: .   # Directory to clone the other repo into
          token: ${{ secrets.TOKEN }} # Required for private repositories

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image for AWS
        shell: bash
        run: |
          docker build -t $AWS_REGISTRY:$VERSION -t $AWS_REGISTRY:latest .
          echo "Building image..."

      - name: Push Docker Image to AWS ECR
        shell: bash
        run: |
          docker push $AWS_REGISTRY:$VERSION
          docker push $AWS_REGISTRY:latest
          echo "Pushing image..."

  create-and-deploy-lambda:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Install AWS SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Build with SAM
        run: sam build

      - name: Deploy with SAM
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name maps-runner-stack --capabilities CAPABILITY_IAM
      
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
